<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>やったこと</title>
  
  <subtitle>やったこと、しらべたこと</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://ytetsuro.github.io/blog/"/>
  <updated>2018-05-21T16:03:54.000Z</updated>
  <id>https://ytetsuro.github.io/blog/</id>
  
  <author>
    <name>ytetsuro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chain of Responsibility</title>
    <link href="https://ytetsuro.github.io/blog/2018/05/21/Chain-of-Responsibility/"/>
    <id>https://ytetsuro.github.io/blog/2018/05/21/Chain-of-Responsibility/</id>
    <published>2018-05-21T13:23:12.000Z</published>
    <updated>2018-05-21T16:03:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li><code>要求</code>を<code>処理</code>するオブジェクトをチェーン状につなぐ。</li><li><code>要求</code>を<code>処理</code>するまでチェーンに沿ってオブジェクトへ要求を渡していく。</li></ul><p>を行うデザインパターン</p><p>自分の責任範囲のみ処理して、あとは処理しない。<br>イメージとしては、クラスを使った再起処理の様な感じ。</p><h2 id="利点"><a href="#利点" class="headerlink" title="利点"></a>利点</h2><ul><li>チェーンを動的に変更しやすい。</li><li><code>処理</code>と<code>要求</code>が緩い結合になる。(要求は必ず処理されるわけではない)</li><li><code>処理</code>の追加が容易。</li><li>複数の条件に一致するものがあるかを判定するときに使いやすい。</li></ul><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>くじの抽選を行う。<br>抽選条件は、下記の2項目のうちどれかを満たさない場合はハズレ</p><ul><li>抽選オブジェクトのisRichフラグがfalseである。</li><li>抽選オブジェクトのvirtuousプロパティが20以上ある。</li><li>抽選オブジェクトのfortuneプロパティが乱数(1〜100)を上回る。</li></ul><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><h4 id="重要なところ"><a href="#重要なところ" class="headerlink" title="重要なところ"></a>重要なところ</h4><p>チェーン状につなぐ基底クラスの実装</p><p><img src="https://www.plantuml.com/plantuml/svg/ROyn2iCm34Ltdq93XfJICpJGJBr0PzaMGSMLmL9e8VJkTHjd2Tq-Z_U_qA26nUP7SkZL2WQ3a50LRYp2CbtdE561nG6SDZPIOEKiP-Y4NhOgLJZkIahMm2LBPAiLxVS4kh35ms-3jIdzMF29FX5qiQNLy3adk7zl_5NURY29zQKF"></p><p>あとは、条件判定ごとにクラスを実装する</p><p><img src="https://www.plantuml.com/plantuml/svg/dP712i8m38RlVOeSTfY8UmB1ePv4mPCUfMlBhDOKcbOTuhixtGPkxg3UGlBzIVua9S-T3oV3U4RUSU5164u4MuseCLy4cIi7DmOmQd8pYr9xRN424Qght-qvIgDSoGmxEbA-AwAucu58DE7WrKDJZSHpnoyyCmeYMKSLaLbhuF2SqOlS6QjShErPEL-ykVXUkz7bOMoW5SU_zCiWZiNK_ZgyVS1nahHDzDG_5krXsikmLA4id_u0"></p><h3 id="PHPで書いてみる"><a href="#PHPで書いてみる" class="headerlink" title="PHPで書いてみる"></a>PHPで書いてみる</h3><p>WinningJudger(Chain of Responsibility)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WinningJudger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $nextJudger;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWinningConditions</span><span class="params">(WinningJudger $condition)</span> : <span class="title">WinningJudger</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;nextJudger = $condition;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> funciton isWinning(Drawable $drawable) : bool</span><br><span class="line">  &#123;</span><br><span class="line">    $result = <span class="keyword">$this</span>-&gt;judge($drawable);</span><br><span class="line">    <span class="keyword">if</span> (!$result) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;nextJudger)) &#123; <span class="comment">// チェーンに沿って要求を渡す</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;nextJudger-&gt;isWinning($drawable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 何も処理されなかった場合はtrueを返す</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">judge</span><span class="params">(Drawable $drawable)</span> : <span class="title">bool</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>次の判定が存在すれば、それを実行する様に実装します。</p><p>あとは、それぞれの判定処理を実装します。</p><p>PovertyJudger<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PovertyJudger</span> <span class="keyword">extends</span> <span class="title">WinningJudger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">judge</span><span class="params">(Drawable $drawable)</span> : <span class="title">bool</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $drawable-&gt;isRich() === <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>VirtuousManJudger<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtuousManJudger</span> <span class="keyword">extends</span> <span class="title">WinningJudger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">judge</span><span class="params">(Drawable $drawable)</span> : <span class="title">bool</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $drawable-&gt;getVirtuous() &gt;= <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>LuckyBoyJudger<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtuousManJudger</span> <span class="keyword">extends</span> <span class="title">WinningJudger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">judge</span><span class="params">(Drawable $drawable)</span> : <span class="title">bool</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $drawable-&gt;getFortune() &gt;= mt_rand(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>この様に、それぞれの判定部分で<code>要求</code>を<code>処理</code>する。<br>このとき、それぞれの判定部分は<code>処理</code>にのみ注力すればよい。</p><p>Drawable<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $fortune;</span><br><span class="line">  <span class="keyword">private</span> $virtuous;</span><br><span class="line">  <span class="keyword">private</span> $rich;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $fortune, int $virtuous, bool $rich)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;fortune = $fortune;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;virtuous = $virtuous;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;rich = $rich;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isRich</span><span class="params">()</span> : <span class="title">bool</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (bool)<span class="keyword">$this</span>-&gt;rich;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFortune</span><span class="params">()</span> : <span class="title">int</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (int)<span class="keyword">$this</span>-&gt;fortune;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getVirtuous</span><span class="params">()</span> : <span class="title">int</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (int)<span class="keyword">$this</span>-&gt;virtuous;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client Code<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$povertyJudger = <span class="keyword">new</span> PovertyJudger();</span><br><span class="line">$virtuousManJudger = <span class="keyword">new</span> VirtuousManJudger();</span><br><span class="line">$luckyBoyJudger = <span class="keyword">new</span> LuckyBoyJudger();</span><br><span class="line"></span><br><span class="line"><span class="comment">// チェーンを作成</span></span><br><span class="line">$virtuousManJudger-&gt;nextJudger($luckyBoyJudger);</span><br><span class="line">$povertyJudger-&gt;nextJudger($virtuousManJudger);</span><br><span class="line"></span><br><span class="line">$drawable = <span class="keyword">new</span> Drawable(<span class="number">101</span>, <span class="number">530000</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span> ($povertyJudger-&gt;isWinning($drawable)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'あたりです。'</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'ハズレです。'</span>;</span><br></pre></td></tr></table></figure></p><p>このコードでは、次の順にチェーンを作成しています。</p><ol><li>virtuousManJudger -&gt; luckyBoyJudger</li><li>povertyJudger -&gt; virtuousManJudger -&gt; luckyBoyJudger</li></ol><p>今回は決め打ちで作成していますが、nextJudgerメソッドをcallするだけなので、動的にも作成しやすく、<br>チェーンの追加も容易な構造になっています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol><li><code>要求</code>を<code>処理</code>するクラスのチェーンを作る</li><li>チェーンに沿って<code>要求</code>を渡していく</li><li>必ず<code>処理</code>される訳ではない。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ja.wikipedia.org/wiki/Chain_of_Responsibility_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">Wikipeida</a><br><a href="http://www.techscore.com/tech/DesignPattern/ChainOfResponsibility.html" target="_blank" rel="noopener">14．Chain of Responsibility パターン | TECHSCORE(テックスコア)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;要求&lt;/code&gt;を&lt;code&gt;処理&lt;/code&gt;するオブジェクトをチェーン状につなぐ。&lt;/li&gt;
&lt;li&gt;&lt;cod
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ytetsuro.github.io/blog/tags/PHP/"/>
    
      <category term="Design Pattern" scheme="https://ytetsuro.github.io/blog/tags/Design-Pattern/"/>
    
      <category term="GoF" scheme="https://ytetsuro.github.io/blog/tags/GoF/"/>
    
  </entry>
  
  <entry>
    <title>Builder</title>
    <link href="https://ytetsuro.github.io/blog/2018/05/20/Builder/"/>
    <id>https://ytetsuro.github.io/blog/2018/05/20/Builder/</id>
    <published>2018-05-20T07:58:14.000Z</published>
    <updated>2018-05-20T20:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>オブジェクトを生成するときに利用する。<br><code>生成手順</code>と<code>生成手段</code>を分けるパターン。</p><p>引数が多いオブジェクトの生成や、生成までの手順が複雑なオブジェクトを生成するとき<br>処理が長くなりやすいので、<code>生成手順</code>と<code>生成手段</code>の<code>責任</code>を分けることができるのが利点</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>チャットメッセージのオブジェクトを生成する。<br>チャットメッセージを構成する要素は、ユーザ情報とメッセージである。</p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><h4 id="重要なところ"><a href="#重要なところ" class="headerlink" title="重要なところ"></a>重要なところ</h4><p><code>生成手段</code>をinterfaceとして定義して、Directorが<code>生成手段</code>に依存する。<br>また、このとき<code>生成手順</code>をDirectorに実装する。</p><p><img src="https://www.plantuml.com/plantuml/svg/NO-n3i8m34HtVuK7XY2aVW531QmiICnLb9eGAKqbsvaG_qxKDW8odiztp-v5BMkU8eIan0_h2AyaOZsTSeWZCRu0yO12kisDA8VaSJUjUb_zkn2RLPsVjgwZ9xsHvAZ5UmEuQ4KgunAOdCuLCWnkJgK-EpND5V-qt_vlPEblSiUkQs40FQMn_Fm1"></p><p><code>生成手順</code>の詳細を実装する</p><p><img src="https://www.plantuml.com/plantuml/svg/lL4x3i8m3Drp2WyTYa0zGOVoMLagCLTHOagaD9LYPmBkJb2922siB95iFx-Fqn1Bps6mmZX6VvOAuOX4iiTTC5QZXwi0M0CXl_ebiJUkXsAOwbMQdmXzELNxYqnmw95Rf60vpkv2A2k9aiR1U5Gy9f6kKwEBz45nENFngPRplrSo_gqUZFj7a1om3F5aWYB4TmCBjSWnSrXNrVmo2yWjOhwa4xcH-WT6DEXq_Em7"></p><p>これで、</p><ul><li>生成手順(MessageDirector)</li><li>生成手段(AdminMessageBuilder)</li></ul><p>が分離された状態になる。</p><h3 id="PHPで書いてみる"><a href="#PHPで書いてみる" class="headerlink" title="PHPで書いてみる"></a>PHPで書いてみる</h3><p>MessageBuilder<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMessage</span><span class="params">(string $message)</span> : <span class="title">void</span></span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUser</span><span class="params">()</span> : <span class="title">void</span></span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span> : <span class="title">ChatMessage</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AdminMessageBuilder(生成手段)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminMessageBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $message;</span><br><span class="line">  <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMessage</span><span class="params">(string $message)</span> : <span class="title">void</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">$this</span>-&gt;message = $message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUser</span><span class="params">()</span> : <span class="title">void</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">$this</span>-&gt;user = <span class="keyword">new</span> User(<span class="string">'admin'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span> : <span class="title">ChatMessage</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ChatMessage(<span class="keyword">$this</span>-&gt;user, <span class="keyword">$this</span>-&gt;message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>どのように生成するのか(生成手段)をBuilderに記載する</p><p>MessageDirector<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageDirector</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $builder;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(MessageBuilder $builder)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">$this</span>-&gt;builder = $builder;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">construct</span><span class="params">(string $message)</span> : <span class="title">ChatMessage</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="comment">// ChatMessageの生成手順のみを記載する。</span></span><br><span class="line">     <span class="keyword">$this</span>-&gt;builder-&gt;setMessage($message);</span><br><span class="line">     <span class="keyword">$this</span>-&gt;builder-&gt;setUser();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;builder-&gt;getResult();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成手順をDirectorに記載する。<br>こうすることによって、以下の様になる。</p><ul><li>Directorはどのように生成するかは知らないが、何を生成するかは知っている。</li><li>Builderは、自らが知っている手順に従ってオブジェクトの生成を行う。</li></ul><p>すると、生成手段が複雑な場合はBuilderパターンでに分けることで、<br><code>責任範囲</code>がはっきりしクラスをうまく切り分けることができる。</p><p>ChatMessage<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatMessage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> $message;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user, string $message)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;message = $message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! property_exists(<span class="keyword">$this</span>, $name)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">'存在しないPropertyです'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;&#123;$name&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>User<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $user_role;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $user_role)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;user_role = $user_role;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! property_exists(<span class="keyword">$this</span>, $name)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">'存在しないPropertyです'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;&#123;$name&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client Code<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$builder  = <span class="keyword">new</span> AdminMessageBuilder();</span><br><span class="line">$director = <span class="keyword">new</span> MessageDirector($builder);</span><br><span class="line">$message  = $director-&gt;construct(<span class="string">'こんにちは'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'本文 : '</span>. $message-&gt;message;</span><br></pre></td></tr></table></figure></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol><li><code>生成手順</code>と<code>生成手段</code>を分離する。</li><li><code>生成手段</code>が複雑な場合は<code>責任範囲</code>が明確なため、うまく切り分けやすい。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ja.wikipedia.org/wiki/Builder_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">Wikipedia</a><br><a href="https://qiita.com/disc99/items/840cf9936687f97a482b" target="_blank" rel="noopener">Javaで書くBuilderパターンのパターン</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;オブジェクトを生成するときに利用する。&lt;br&gt;&lt;code&gt;生成手順&lt;/code&gt;と&lt;code&gt;生成手段&lt;/code&gt;を分けるパターン。&lt;/p&gt;
&lt;p&gt;引数が多いオブジェクトの生成や、生成までの手順が複雑なオブジェクトを生成するとき&lt;br&gt;処理が長くなりやすいので、&lt;code
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ytetsuro.github.io/blog/tags/PHP/"/>
    
      <category term="Design Pattern" scheme="https://ytetsuro.github.io/blog/tags/Design-Pattern/"/>
    
      <category term="GoF" scheme="https://ytetsuro.github.io/blog/tags/GoF/"/>
    
  </entry>
  
  <entry>
    <title>Bridge</title>
    <link href="https://ytetsuro.github.io/blog/2018/05/19/Bridge/"/>
    <id>https://ytetsuro.github.io/blog/2018/05/19/Bridge/</id>
    <published>2018-05-19T02:27:28.000Z</published>
    <updated>2018-05-19T14:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>「何を行うのか(機能)」と「どのような処理をするのか(実装)」それぞれの拡張方法を分けるパターン。</p><p>「何を行うのか(機能)」を実装する場合は、「どのような処理をするのか(実装)」を意識しなくても良いのが利点。</p><p>Bridgeパターンは先日の<a href="https://ytetsuro.github.io/blog/2018/05/18/Adapter/">Adapter パターン</a>と非常によく似ているが、<br>Adapterパターンは<code>既存のクラス</code>を再利用するために導入する後天的な理由に対し、<br>Bridgeパターンは<code>設計の段階</code>で分離するという先天的な理由で導入されるのが大きな違い。</p><p>また、よくOOPを学び始めにやりがちな継承の失敗(is-a関係から外れた継承)を起こしにくいので積極的に導入したい。</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>XMLかHTML5からタイトルを取得する。</p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><h4 id="重要なところ"><a href="#重要なところ" class="headerlink" title="重要なところ"></a>重要なところ</h4><p><code>どのような処理をするのか</code>を実装する。</p><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShCAqajIajCJbK8I4nF3KWiAaujKgZcKb3GLYWkAShCIrT8Joq9oIp9ITNGvAhbuahEIImkLd3nzoLMQKH0Oaa6OSL8jjlKwEaXRC2GGJAGYyiXDIy5w0q0"></p><p><code>何を行うのか</code>を実装する。</p><p><img src="https://www.plantuml.com/plantuml/svg/ZP312i8m38RlVOeSF6m8Um8FEtWL2nFcRSGQQw5s8qrFqtUtA4X5H6-1xmj_yhTHa2LTl38UOuIU3frXd8XXLW1B60OpXYYSZ5GQBMdacE5YodCt9ZPKFxoik631akoSUAfgTLFA1I4-eI4eLkVl_lE6zNRphxhNAEVVSf6-QfhYoNTqpUmL_a6ABDLIEERIxW00"></p><p>これで、</p><ul><li>何を行うのか(WebScraper)</li><li>どのような処理をするのか(PageParser,DOMParser,XPathParser)</li></ul><p>が分離された状態になる。</p><h3 id="PHPで書いてみる"><a href="#PHPで書いてみる" class="headerlink" title="PHPで書いてみる"></a>PHPで書いてみる</h3><p>PageParser<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PageParser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span> : <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>DOMParser<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMParser</span> <span class="keyword">implements</span> <span class="title">PageParser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  prviate $document;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(DOMDocument $document)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">$this</span>-&gt;document = $document;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span> : <span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     $element = <span class="keyword">$this</span>-&gt;document-&gt;getElementsByTagName(<span class="string">'title'</span>)-&gt;item(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> $element-&gt;textContent ?? <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>DOMParserが<code>どのような処理をするのか</code>を表している。<br>この例ではDOMDocumentを取得して、titleタグの1つ目のテキストを取得している。</p><p>WebScraper<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebScraper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $pageParser;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PageParser $pageParser)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// このクラスはどのように処理するのかを委譲している</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;pageParser = $pageParser;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span> : <span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pageSource-&gt;getTitle();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>WebScraperが<code>何をするのか</code>のコード。</p><p>WebScraperは、PageParserクラスをプロパティで保持して、<br>具体的にgetTitleでどのような処理をするのかをPageParserに委譲している。</p><p>このようにWebScraperが<code>何をするのか</code>と<code>どのように処理するのか</code>の<code>橋渡し</code>をしている。</p><p>ここでタイトルの一部分だけを取得する機能が拡張された場合でも</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HyperWebScraper</span> <span class="keyword">extends</span> <span class="title">WebScraper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSubstringTitle</span><span class="params">(int $start, int $end)</span> : <span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substr(<span class="keyword">$this</span>-&gt;pageSource-&gt;getTitle(), $start, $end);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように<code>何をするのか</code>は具体的なタイトルを取得する処理を知ることなく実装することができる。</p><p>Client Code<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$doc = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$doc-&gt;loadHTMLFile(<span class="string">'example.html'</span>);</span><br><span class="line"></span><br><span class="line">$pageSource = <span class="keyword">new</span> DOMParser($doc);</span><br><span class="line">$webScraper = <span class="keyword">new</span> WebScraper($pageSource);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $webScraper-&gt;getTitle();</span><br></pre></td></tr></table></figure></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol><li><code>何を行うのか</code>と<code>どのような処理をするのか</code>を分離する。</li><li><code>何を行うのか</code>を実装する場合は、<code>どのような処理をするのか</code>を意識しなくても良い。</li><li>委譲で実装する。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ja.wikipedia.org/wiki/Bridge_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">WikiPedia</a><br><a href="http://d.hatena.ne.jp/shimooka/20141216/1418705115" target="_blank" rel="noopener">Do You PHP はてな</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;「何を行うのか(機能)」と「どのような処理をするのか(実装)」それぞれの拡張方法を分けるパターン。&lt;/p&gt;
&lt;p&gt;「何を行うのか(機能)」を実装する場合は、「どのような処理をするのか(実装)」を意識しなくても良いのが利点。&lt;/p&gt;
&lt;p&gt;Bridgeパターンは先日の&lt;a h
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ytetsuro.github.io/blog/tags/PHP/"/>
    
      <category term="Design Pattern" scheme="https://ytetsuro.github.io/blog/tags/Design-Pattern/"/>
    
      <category term="GoF" scheme="https://ytetsuro.github.io/blog/tags/GoF/"/>
    
  </entry>
  
  <entry>
    <title>Adapter</title>
    <link href="https://ytetsuro.github.io/blog/2018/05/18/Adapter/"/>
    <id>https://ytetsuro.github.io/blog/2018/05/18/Adapter/</id>
    <published>2018-05-18T05:53:20.000Z</published>
    <updated>2018-05-19T12:39:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Interfaceと実装の中間装置的なデザインパターン。</p><p>既存のクラスに変更を加えることなく、APIを変更することができるのが利点。</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>FWとかに依存せずに<code>users</code>テーブルからユーザ情報の一覧をとってくる</p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><h4 id="重要なところ"><a href="#重要なところ" class="headerlink" title="重要なところ"></a>重要なところ</h4><p>どのような処理を行うかのInterfaceを定義する。</p><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShCAqajIajCJbK8BKujSaijISv8BLAevb9Gq0QBHCSgfAUMQ6XorN9n9USa5XU3HQ4AYakAClFIGGhy4dDJ8Oh0qZPwUiZcSJcavgK0RGC0"></p><p>あとは、Userユーザデータを実際に取得するロジックを呼び出すような中間装置的な役割を持つ<code>Adapter</code>を実装する。<br>以下は、CodeIgniterを利用した例</p><p><img src="https://www.plantuml.com/plantuml/svg/XP4n2y8m48Nt_8eC3ehGnRL3fIAuk3cfbBGvQo2DUhaCHVtljcae0T6kB-zzT_UIMH98hj5C6GAyY0humG9kWQeh87yopfTUEPvv3JHVi3TZbHRMUZKOBA4oTM_OYmPYqrgAEqs0yfk4NMqKuEgKxufDMJmSO5kKJcavPhzT2DPfyhImm8n4gQ7VuIy-10UkG1Gj7wIHuvCZnr-Q9abS3OjhIb_TOpYL_PpN4oPkPLDTfD6W38pilku3"></p><p>また、UserFetcharはCI_Db_query_builderクラスなどFW固有のクラスには一切依存していない。<br>これにより、クライアントコードをUserFetcherインターフェースに依存すれば、FWに依存せずユーザ情報が取得できる。</p><p>例えば、Laravelに依存する場合は以下のようにAdapterとFW固有のクラスが変わるだけ。</p><p><img src="https://www.plantuml.com/plantuml/svg/ZP0z3i8m38Ltdo8Z2Aadw50aG6A0ZOamcDIKI4vQ4cS2xau97S84w_FtVkGc2WP9Zi5weN11G-eGAMn8p9M2keDIYwmSJweZcStX2M0OOypg14G9rdTlO8-EIcZPuY0_WhRCoLcFGdg5WcUCfDVStn9vqRk-9PxioFpnvUgwgigjKEwk7-DnweO_yh_uXdmxlkG5"></p><p>また、これらは委譲を行うパターンだが、継承を利用するパターンもある。</p><p><img src="https://www.plantuml.com/plantuml/svg/XP2n3i8m34HtVqL646g_e4DXo0OJdH23bPfIAMcGOuQAyk-afK8HL69zTxRlN0P1bhkpq7P2V453gWh4ciHSYTK3bDfCv7HM3Sbg3Ky0Op64YSw68DnspMWueAFKjAtn9dyM7P6zHjVQNgCHpttYLeO9XJHAZ1E7llZUB_CT-x34nrFlqnCiyZoj2sdrOeZY71z-8nP3bdtaahewFl45"></p><h3 id="PHPで書いてみる"><a href="#PHPで書いてみる" class="headerlink" title="PHPで書いてみる"></a>PHPで書いてみる</h3><p>UserFetcher(Interface)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserFetcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> : <span class="title">array</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>User(Entity)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $config = [])</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">empty</span>($config[<span class="string">'name'</span>])) &#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;name = $config[<span class="string">'name'</span>]</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Adapter(CodeIgniterのパターン)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="title">implement</span> <span class="title">UserFetcher</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $db;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(CI_Db_query_builder $db)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">(int $id)</span> : <span class="title">array</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    reutrn <span class="keyword">$this</span>-&gt;db-&gt;get(<span class="string">'users'</span>)-&gt;result(User::class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client Code<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameRenderer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> $fetcher;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserFetcher $fetcher)</span> // &lt;- 抽象に依存</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;fetcher = $fetcher;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     $users = <span class="keyword">$this</span>-&gt;fetcher-&gt;get();</span><br><span class="line">     <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $user-&gt;getName() . <span class="string">'さん、こんにちは'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$fetcher = <span class="keyword">new</span> Adapter(get_instance()-&gt;db);</span><br><span class="line"><span class="comment">// NameRendererは、UserFetcherのインターフェースが利用できれば良い</span></span><br><span class="line">$renderer = <span class="keyword">new</span> NameRenderer($fetcher);</span><br><span class="line">$renderer-&gt;render();</span><br></pre></td></tr></table></figure></p><p>この様に、NameRendererがほしいUserFetcher Interfaceの<code>中間装置</code>的な役割を行う<br><code>Adapter</code>を変更すれば、クライアントコードが実装可能になる。<br>また、これは委譲を行うパターンだが、継承を利用するパターンもある。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TarouFamilyFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createFather</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> User([<span class="string">'name'</span> =&gt; <span class="string">'一郎'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createMother</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> User([<span class="string">'name'</span> =&gt; <span class="string">'たえ'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBrother</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> User([<span class="string">'name'</span> =&gt; <span class="string">'ロードリゲス'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTaro</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> User([<span class="string">'name'</span> =&gt; <span class="string">'太郎'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Adapter(継承を利用するパターン)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">TarouFamilyFactory</span> <span class="title">implement</span> <span class="title">UserFetcher</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> : <span class="title">array</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     <span class="comment">// 親クラスのメソッドを、Interfaceに合わせた形で提供する</span></span><br><span class="line">     <span class="keyword">return</span> [</span><br><span class="line">       <span class="keyword">$this</span>-&gt;createFather(), <span class="comment">// 親クラスのメソッドを利用する</span></span><br><span class="line">       <span class="keyword">$this</span>-&gt;createMother(),</span><br><span class="line">       <span class="keyword">$this</span>-&gt;createBrother(),</span><br><span class="line">       <span class="keyword">$this</span>-&gt;createTaro(),</span><br><span class="line">     ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol><li><code>Interface</code>と<code>既存クラス</code>の橋渡しを行う</li><li>委譲でも継承でも実装しても良い</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ja.wikipedia.org/wiki/Adapter_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">Wikipeida</a><br><a href="http://www.ie.u-ryukyu.ac.jp/~e085739/java.it.6.html" target="_blank" rel="noopener">デザインパターン入門 (Quick Tutorial)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Interfaceと実装の中間装置的なデザインパターン。&lt;/p&gt;
&lt;p&gt;既存のクラスに変更を加えることなく、APIを変更することができるのが利点。&lt;/p&gt;
&lt;h2 id=&quot;例&quot;&gt;&lt;a href=&quot;#例&quot; class=&quot;headerlink&quot; title=&quot;例&quot;&gt;&lt;/a&gt;例&lt;
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ytetsuro.github.io/blog/tags/PHP/"/>
    
      <category term="Design Pattern" scheme="https://ytetsuro.github.io/blog/tags/Design-Pattern/"/>
    
      <category term="GoF" scheme="https://ytetsuro.github.io/blog/tags/GoF/"/>
    
  </entry>
  
  <entry>
    <title>Abstract Factory</title>
    <link href="https://ytetsuro.github.io/blog/2018/05/17/Abstract-Factory/"/>
    <id>https://ytetsuro.github.io/blog/2018/05/17/Abstract-Factory/</id>
    <published>2018-05-17T05:34:28.000Z</published>
    <updated>2018-05-17T09:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>抽象クラスを生成する抽象クラスを利用したデザインパターン。<br>「抽象的な工場」と訳される場合があると言われているが、<strong>言われている例をあまり見たことがない。</strong></p><p>同じような構造のクラスを生成するパターンが複数に分岐する場合に有効。<br>Factory Methodパターンとの違いは正直よくわかっていないけど、Factory Methodをいっぱい作ったらAbstract Factoryなんじゃないの？ぐらいの認識。</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><code>釣り具</code>メーカの<code>リール</code>と<code>ロッド</code>を生成するFactoryクラスがあり、<br>それぞれの、メーカは<code>simano</code>と<code>Daiwa</code>を準備する場合。</p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><h4 id="重要なところ"><a href="#重要なところ" class="headerlink" title="重要なところ"></a>重要なところ</h4><p>Abstract Factoryクラスで抽象クラスを生成するようにメソッドを定義する。<br>また、Abstract Factoryクラス自体も抽象クラスとして実装する。</p><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuShCAqajIajCJbLmoopEoCnB3ydFpobMgEPIKD1M24fDpL58Joq1qHgQ4A7y50MmK7uAKAIM2ya0i6gGHeMIej8y35cWHh1aGMbE3aGIhC56Jm_5QYwGGWn1BeVKl1IWUm40"></p><p>あとは、Factoryクラスの<code>パターン</code>として具象クラスを作る。<br>以下の例では、Daiwaファクトリクラスを作っている。</p><p><img src="https://www.plantuml.com/plantuml/svg/TL4z3i8W5DxVATweCUa9EdGm7i0ukf3oh2G81cWSgdUN7sk1waJo_GETTSouyIP1A4Vcmdh2Wx1NeOQJrjBY18WxF1997CY5SxDDaEOO8SqzyWBe9REsC9_tJ3pOAa9-8sQeZ0XmPaLdHbNmckVqVOo1dbwk49ChSyRwwPKr6jfdqsJj47G9cnkJyDFUUcPzNLZc_H50yS2nu9SgJQh8jAa6eIF5_IU-0G00"></p><p>こうすることにより、Factoryクラスを<code>パターン</code>で分けることができる。<br>今回の例では、FishingTools(釣り具)のパターンがDaiwaとsimanoが存在するため、</p><ul><li>Daiwaとsimanoを<code>具象クラス</code>として定義</li><li>FishingTools(釣り具)を<code>抽象クラス</code>として定義</li></ul><p>これによりクライアントコードは<code>抽象クラス</code>へ依存させることができるようになる。</p><h4 id="全体像"><a href="#全体像" class="headerlink" title="全体像"></a>全体像</h4><p><img src="https://www.plantuml.com/plantuml/svg/fL9B3i8W4DtFAMQfCUa9N7HXF82wT4CALX8Afj2uKEyk7zCERTKOLoJlC_CUK5h7MjSr2gHseZsnIk1MshFKzS4OPV46Y2lS2Q6m5YwSYsM23CS86UwH1q2bcBMP-RYN3TFclnaR9g_iXn53ZwWEHdHjfoUiDqRoqYb5jmSRJKxSBu7X6JyxO8WzwoVqO8-1r_UYe1d6Q7H2I9-mFaoE9HdGCcjFpJmFa3xl940wJJHzeiy2oFvL33gtwekAz9eiIZSm1g4KcliV_WG0"></p><h3 id="PHPで書いてみる"><a href="#PHPで書いてみる" class="headerlink" title="PHPで書いてみる"></a>PHPで書いてみる</h3><p>FishingTools(Abstract Factory)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FishingTools</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReel</span><span class="params">()</span> : <span class="title">Reel</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRod</span><span class="params">()</span> : <span class="title">Rod</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Daiwa(Concrete Factory)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FishingTools</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Reel</span>\<span class="title">Daiwa</span> <span class="title">as</span> <span class="title">DaiwaReel</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Rod</span>\<span class="title">Daiwa</span> <span class="title">as</span> <span class="title">DaiwaRod</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Daiwa</span> <span class="keyword">implements</span> <span class="title">FishingTools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getReel</span><span class="params">()</span> : <span class="title">Reel</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DaiwaReel(); <span class="comment">// 具象クラスに依存</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRod</span><span class="params">()</span> : <span class="title">Rod</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DaiwaRod(); <span class="comment">// 具象クラスに依存</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client Code<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fisher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> $reel;</span><br><span class="line">  <span class="keyword">private</span> $rod;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(FishingTools $tools)</span> // &lt;- 抽象に依存</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;reel = $tools-&gt;getReel();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;rod  = $tools-&gt;getRod();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">playFishing</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">$this</span>-&gt;reel-&gt;trun()) &#123;</span><br><span class="line">      <span class="comment">// @<span class="doctag">todo:</span> 釣れたか判定を書く</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$fishingTools = <span class="keyword">new</span> FishingTools\Daiwa();</span><br><span class="line">$fisher = <span class="keyword">new</span> Fisher($fishingTools);</span><br><span class="line">$fisher-&gt;playFishing();</span><br></pre></td></tr></table></figure></p><p>このようにClient Codeを抽象クラスに依存させることによって、<br>$fishingToolsはDaiwaでもsimanoでも釣り具を生成できればなんでもいい状態ができる。</p><p>この、抽象クラスに依存できるところにOOP的な旨味があるのではないかと思う。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ol><li><code>抽象クラス(Abstract Class)</code>を生成する<code>抽象クラス(Abstract Factory)</code>を作る</li><li>実際にどの<code>具象クラス(Concrete Class)</code>を生成するのかは<code>具象クラス(Concrete Factory)</code>に実装する</li></ol><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>動機としては、会社でデザインパターンについてどれほど理解があるのかのアンケートがあった。<br>デザインパターンの復習と学習のため、アンケートででてきたデザインパターンを1日ずつPHPで書いてみようと思う。</p><p>39種類あったので6/24ぐらいには39種類全て書けるかと思う。</p><p>また、デザインパターンについては自信があまりないので</p><ul><li>これで伝わるのか</li><li>そもそも認識が正しいのか</li></ul><p>が不安</p><p><a href="https://ja.wikipedia.org/wiki/Abstract_Factory_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" target="_blank" rel="noopener">Wiki Pedia</a><br><a href="http://www.ie.u-ryukyu.ac.jp/~e085739/java.it.2.html" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;抽象クラスを生成する抽象クラスを利用したデザインパターン。&lt;br&gt;「抽象的な工場」と訳される場合があると言われているが、&lt;strong&gt;言われている例をあまり見たことがない。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同じような構造のクラスを生成するパターンが複数に分岐する場合に有効
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://ytetsuro.github.io/blog/tags/PHP/"/>
    
      <category term="Design Pattern" scheme="https://ytetsuro.github.io/blog/tags/Design-Pattern/"/>
    
      <category term="GoF" scheme="https://ytetsuro.github.io/blog/tags/GoF/"/>
    
  </entry>
  
  <entry>
    <title>Hexoを使ってGithubPagesにBlogを構築してみた</title>
    <link href="https://ytetsuro.github.io/blog/2018/05/16/Hexo%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Blog%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/"/>
    <id>https://ytetsuro.github.io/blog/2018/05/16/Hexoを使ってBlogを構築してみた/</id>
    <published>2018-05-16T06:57:45.000Z</published>
    <updated>2018-05-16T10:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用したツールなど"><a href="#使用したツールなど" class="headerlink" title="使用したツールなど"></a>使用したツールなど</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></p><p>Node.js製のMarkdownから静的なHTMLやCSSを出力してくれるブログツール</p><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GithubPages</a></p><p>リポジトリの特定のブランチを静的なページとして表示してくれるGithubの機能</p><h2 id="導入方法"><a href="#導入方法" class="headerlink" title="導入方法"></a>導入方法</h2><h3 id="GitHubPages作成手順"><a href="#GitHubPages作成手順" class="headerlink" title="GitHubPages作成手順"></a>GitHubPages作成手順</h3><ol><li>GitHubにてリポジトリを作成</li><li>作成したGitHubリポジトリより「Setting」 -&gt; [Github Pages] -&gt; [Source] -&gt; [master Branch]を選択してSaveを押下</li></ol><p>これで、GitHub Pagesは作成完了👍</p><h3 id="Hexoの導入"><a href="#Hexoの導入" class="headerlink" title="Hexoの導入"></a>Hexoの導入</h3><p>Hexoのドキュメントに従って以下を実行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>Blogの設定を変更</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> ## Source: https://github.com/hexojs/hexo/</span><br><span class="line"> </span><br><span class="line"> # Site</span><br><span class="line"><span class="deletion">-title: Hexo</span></span><br><span class="line"><span class="deletion">-subtitle:</span></span><br><span class="line"><span class="deletion">-description:</span></span><br><span class="line"><span class="deletion">-keywords:</span></span><br><span class="line"><span class="deletion">-author: John Doe</span></span><br><span class="line"><span class="deletion">-language:</span></span><br><span class="line"><span class="deletion">-timezone:</span></span><br><span class="line"><span class="addition">+title: &#123;&#123;ブログのタイトル&#125;&#125;</span></span><br><span class="line"><span class="addition">+subtitle: &#123;&#123;ブログのサブタイトル&#125;&#125;</span></span><br><span class="line"><span class="addition">+description: &#123;&#123;ブログの詳細な説明を書く&#125;&#125;</span></span><br><span class="line"><span class="addition">+keywords: &#123;&#123;多分keywordを書く@todo: themeによって異なりそうだけど、metaのkeywork？&#125;&#125;</span></span><br><span class="line"><span class="addition">+author: &#123;&#123;自分の名前&#125;&#125;</span></span><br><span class="line"><span class="addition">+language: ja</span></span><br><span class="line"><span class="addition">+timezone: Asia/Tokyo</span></span><br><span class="line"> </span><br><span class="line"> # URL</span><br><span class="line"> ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line"><span class="deletion">-url: http://yoursite.com</span></span><br><span class="line"><span class="deletion">-root: /</span></span><br><span class="line"><span class="addition">+url: https://&#123;&#123;Githubのユーザ名&#125;&#125;.github.io/&#123;&#123;Github Pagesとして作ったリポジトリ名&#125;&#125;</span></span><br><span class="line"><span class="addition">+root: /&#123;&#123;Github Pagesとして作ったリポジトリ名&#125;&#125;</span></span><br><span class="line"> permalink: :year/:month/:day/:title/</span><br><span class="line"> permalink_defaults:</span><br><span class="line"> </span><br><span class="line"><span class="meta">@@ -73,9 +73,11 @@</span></span><br><span class="line"> # Extensions</span><br><span class="line"> ## Plugins: https://hexo.io/plugins/</span><br><span class="line"> ## Themes: https://hexo.io/themes/</span><br><span class="line"> theme: landscape</span><br><span class="line"> </span><br><span class="line"> # Deployment</span><br><span class="line"> ## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"> deploy:</span><br><span class="line"><span class="deletion">-  type:</span></span><br><span class="line"><span class="addition">+  type: git</span></span><br><span class="line"><span class="addition">+  repo: &#123;&#123;Github Pagesで作ったリポジトリ&#125;&#125;</span></span><br><span class="line"><span class="addition">+  branch: master</span></span><br></pre></td></tr></table></figure><h4 id="Hexoにthemeを指定する"><a href="#Hexoにthemeを指定する" class="headerlink" title="Hexoにthemeを指定する"></a>Hexoにthemeを指定する</h4><p>デフォルトのテーマだとHello Worldのページ表示に1.44secかかっていたので、<br>もっと軽量で500ms以内でHello Worldぐらいの内容を返してくれるthemeを探ことにした。<br>(hexo serverにて計測)</p><p>Hexoには<a href="https://hexo.io/themes" target="_blank" rel="noopener">Theme 一覧</a>ページがあったので、ここからいい感じのthemeを探す。</p><p><a href="https://github.com/tiaanduplessis/hexo-theme-brewski" target="_blank" rel="noopener">brewski</a>がすごく軽量だったので手元のHexoにインストールする。<br>(名前からしてbrew Licenceかと思ったが、MITだった。)</p><p>このthemeはドキュメントが充実していたのでドキュメント通りに下記を実行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tiaanduplessis/hexo-theme-brewski.git themes/brewski</span><br><span class="line">$ npm install --save hexo-renderer-pug hexo-generator-feed hexo-generator-sitemap</span><br><span class="line">$ vim theme/_config.yml</span><br></pre></td></tr></table></figure><p><em>menuは空の値を作ると<a href="https://github.com/tiaanduplessis/hexo-theme-brewski/issues/1" target="_blank" rel="noopener">こんなエラーがでてbuildできない</a>ので必ず埋めること。</em></p><p>不要であれば項目自体消す。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@@ -5,7 +5,7 @@</span></span><br><span class="line">   Home: /</span><br><span class="line">   About: /about</span><br><span class="line">   Archives: /archives</span><br><span class="line"><span class="deletion">-  GitHub: </span></span><br><span class="line"><span class="addition">+  GitHub: &#123;&#123;GitHubのURLなどHeaderに付くリンク&#125;&#125;</span></span><br><span class="line">   RSS: /atom.xml</span><br><span class="line"> </span><br><span class="line"> favicon: /favicon.svg</span><br><span class="line"><span class="meta">@@ -15,10 +15,10 @@</span></span><br><span class="line"><span class="deletion">-disqus: </span></span><br><span class="line"><span class="addition">+disqus: &#123;&#123;Disqusのshortname(必要であれば)&#125;&#125;</span></span><br><span class="line"> </span><br><span class="line"> # Analytics</span><br><span class="line"><span class="deletion">-google_analytics:</span></span><br><span class="line"><span class="addition">+google_analytics: UA-XXXXXXXXX-1</span></span><br><span class="line"> </span><br><span class="line"> # Copyright Infomation</span><br><span class="line"> copyright:</span><br><span class="line"><span class="deletion">-  since:</span></span><br><span class="line"><span class="deletion">-  name: </span></span><br><span class="line"><span class="deletion">-  url:  </span></span><br><span class="line"><span class="addition">+  since: 2018</span></span><br><span class="line"><span class="addition">+  name: &#123;&#123;名前&#125;&#125;</span></span><br><span class="line"><span class="addition">+  url: &#123;&#123;ブログのURL&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="ブログの確認"><a href="#ブログの確認" class="headerlink" title="ブログの確認"></a>ブログの確認</h4><p>下記コマンドを実行して表示されたURLへブラウザでアクセスするだけ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><h4 id="ブログのデプロイ"><a href="#ブログのデプロイ" class="headerlink" title="ブログのデプロイ"></a>ブログのデプロイ</h4><p>gitを利用したdeploy用のプラグインをインストールする</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save --no-optional</span></span><br></pre></td></tr></table></figure><p>下記コマンドを実行してデプロイ<br>(gオプションをつけると静的ファイルをgenereateしてデプロイする)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy -g</span></span><br></pre></td></tr></table></figure><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>ブログ程度の内容であれば、Github Pagesで十分事足りると思いやってみたらHexoがすごく簡単で驚いた。<br>また、vimで記事が書けるのはすごく良い。</p><p><a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>については簡単すぎて記事では書いていないけれども、下記の記事を参考にするとすぐに導入可能でしたので参考までに</p><p><a href="https://azriton.github.io/2017/02/26/Hexo%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%AC%84%E3%81%AEDisqus%E3%82%92%E8%A8%AD%E7%BD%AE/" target="_blank" rel="noopener">Hexo に コメント欄 の Disqus を 設置</a></p><h3 id="課題、気になること"><a href="#課題、気になること" class="headerlink" title="課題、気になること"></a>課題、気になること</h3><ul><li>元のmarkdownを<code>hexo deploy</code>でバージョン管理できないのか</li><li>Disqusでコメント機能を入れたが、barbaのpjaxなる機能で記事詳細に行った時に更新しないとDisqusが読み込まれない(修正後themeへ要PR)</li><li>注釈みたいな機能が欲しい(あるか確認してなければ作る)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用したツールなど&quot;&gt;&lt;a href=&quot;#使用したツールなど&quot; class=&quot;headerlink&quot; title=&quot;使用したツールなど&quot;&gt;&lt;/a&gt;使用したツールなど&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://ytetsuro.github.io/blog/tags/Node-js/"/>
    
      <category term="Hexo" scheme="https://ytetsuro.github.io/blog/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://ytetsuro.github.io/blog/tags/Github-Pages/"/>
    
  </entry>
  
</feed>
